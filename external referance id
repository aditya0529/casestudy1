import json
import boto3
import re
import logging

# Create logger
logger = logging.getLogger()
logger.setLevel(logging.INFO)

codepipeline_client = boto3.client('codepipeline')
codebuild_client = boto3.client('codebuild')
logs_client = boto3.client('logs')

def log_raw_event(event):
    """
    Logs the entire event for troubleshooting (original step #1).
    """
    print("Received event: " + json.dumps(event))
    logger.debug("Received raw event via logger.debug")

def parse_event_details(event):
    """
    Parses the pipeline name, execution-id, stage, and state from event detail.
    (original lines in the lambda_handler, steps #1 & #2)
    Returns pipeline_name, execution_id, stage_name, state.
    """
    detail = event.get("detail", {})

    pipeline_name = detail.get("pipeline")
    execution_id  = detail.get("execution-id")  # note the dash
    stage_name    = detail.get("stage")
    state         = detail.get("state")

    print(f"Parsed pipeline_name={pipeline_name}, execution_id={execution_id}, "
          f"stage_name={stage_name}, state={state}")
    logger.debug(f"Parsed details: pipeline_name={pipeline_name}, "
                 f"execution_id={execution_id}, stage_name={stage_name}, state={state}")
    return pipeline_name, execution_id, stage_name, state

def retrieve_action_executions(pipeline_name, execution_id):
    """
    Calls list_action_executions to retrieve all actions for this pipeline execution.
    (original try/except block in the lambda_handler)
    Returns the list of action executions or None on error.
    """
    try:
        resp = codepipeline_client.list_action_executions(
            pipelineName=pipeline_name,
            filter={"pipelineExecutionId": execution_id}
        )
        action_executions = resp.get("actionExecutionDetails", [])
        print(f"Retrieved {len(action_executions)} action execution(s) for pipeline execution {execution_id}.")
        logger.debug(f"action_executions response: {json.dumps(action_executions, default=str)}")
        return action_executions
    except Exception as e:
        print(f"Error calling list_action_executions: {str(e)}")
        logger.exception("Exception in list_action_executions")
        return None

def log_action_details(action_executions):
    """
    Logs details about each action (type, category, provider, externalExecutionId, etc.).
    (original for-loop that prints [DEBUG] lines)
    """
    for action_detail in action_executions:
        action_name = action_detail.get("actionName")
        status      = action_detail.get("status")

        # Grab the input data (where category & provider live)
        input_info       = action_detail.get("input", {})
        action_type_id   = input_info.get("actionTypeId", {})
        category         = action_type_id.get("category")
        provider         = action_type_id.get("provider")

        # Grab the output data (where externalExecutionId lives)
        output_info      = action_detail.get("output", {})
        execution_result = output_info.get("executionResult", {})
        ext_id           = execution_result.get("externalExecutionId")

        print(
            f"[DEBUG] StageName={action_detail.get('stageName')}, "
            f"ActionName={action_name}, Status={status}, "
            f"Category={category}, Provider={provider}, "
            f"externalExecutionId={ext_id}"
        )
        logger.debug(
            f"Logging action detail: StageName={action_detail.get('stageName')}, "
            f"ActionName={action_name}, Status={status}, "
            f"Category={category}, Provider={provider}, "
            f"externalExecutionId={ext_id}"
        )

def identify_failed_codebuild_actions(action_executions):
    """
    Filters for actions that have status=Failed and are CodeBuild (category=Build, provider=CodeBuild).
    (original code in the lambda_handler)
    Returns a list of failed CodeBuild actions.
    """
    failed_codebuild_actions = []
    for action_detail in action_executions:
        status = action_detail.get("status")
        if status == "Failed":
            input_info       = action_detail.get("input", {})
            action_type_id   = input_info.get("actionTypeId", {})
            category         = action_type_id.get("category")
            provider         = action_type_id.get("provider")

            if category == "Build" and provider == "CodeBuild":
                failed_codebuild_actions.append(action_detail)

    if not failed_codebuild_actions:
        print("No failed CodeBuild actions found. Exiting.")
        logger.debug("No failed CodeBuild actions found in identify_failed_codebuild_actions")
    return failed_codebuild_actions

def process_failed_codebuild_actions(failed_codebuild_actions, pipeline_name, execution_id, stage_name):
    """
    For each failed CodeBuild action, checks logs for 'Rate exceeded' and triggers RetryStageExecution if found.
    (original final loop in the lambda_handler)
    """
    for failed_action in failed_codebuild_actions:
        output_info      = failed_action.get("output", {})
        execution_result = output_info.get("executionResult", {})
        build_arn        = execution_result.get("externalExecutionId")

        if not build_arn:
            print("No externalExecutionId (CodeBuild ARN) found for the failed action. Skipping.")
            logger.debug("Skipped action due to missing externalExecutionId (build_arn).")
            continue

        try:
            builds_response = codebuild_client.batch_get_builds(ids=[build_arn])
            builds = builds_response.get("builds", [])
            if not builds:
                print(f"No build info returned for ARN: {build_arn}. Skipping.")
                logger.debug(f"No build info returned for ARN {build_arn}")
                continue

            build_info     = builds[0]
            logs_info      = build_info.get("logs", {})
            log_group_name = logs_info.get("groupName")
            log_stream_name = logs_info.get("streamName")

            if not log_group_name or not log_stream_name:
                print("No log group/stream found for this build. Skipping.")
                logger.debug(f"No log group/stream found for build ARN: {build_arn}")
                continue

            print(f"Checking logs in group={log_group_name}, stream={log_stream_name}")
            logger.debug(f"About to filter log events in group={log_group_name}, stream={log_stream_name}")

            response = logs_client.filter_log_events(
                logGroupName=log_group_name,
                logStreamNames=[log_stream_name],
                filterPattern='?Rate ?exceeded',
                limit=100
            )

            matched = False
            for event_message in response.get("events", []):
                message = event_message.get("message", "")
                if re.search(r"Rate exceeded", message, re.IGNORECASE):
                    matched = True
                    break

            if matched:
                print("Found 'Rate exceeded' in logs. Retrying the pipeline stage...")
                logger.debug(f"Retrying stage execution for pipeline={pipeline_name}, executionId={execution_id}")
                try:
                    retry_resp = codepipeline_client.retry_stage_execution(
                        pipelineName=pipeline_name,
                        pipelineExecutionId=execution_id,
                        stageName=stage_name,
                        retryMode='FAILED_ACTIONS'
                    )
                    print("Retry response:", retry_resp)
                    logger.info(f"Retry response: {retry_resp}")
                except Exception as re_err:
                    print(f"Error retrying stage execution: {str(re_err)}")
                    logger.exception("Exception in retry_stage_execution")
            else:
                print("No 'Rate exceeded' error found in logs for this build.")
                logger.debug("No 'Rate exceeded' found. No retry triggered.")

        except Exception as cbe:
            print(f"Error handling CodeBuild ARN {build_arn}: {str(cbe)}")
            logger.exception("Exception while handling CodeBuild logs or retry")

def lambda_handler(event, context):
    """
    Orchestrates the entire flow but keeps the same steps/logic as your original code.
    """

    # Step 1) Log the raw event
    log_raw_event(event)

    # Step 2) Parse the event details
    pipeline_name, execution_id, stage_name, state = parse_event_details(event)

    # Step 3) Add logic so we only continue if state == "FAILED" AND stage_name == "CloudFormationResource"
    if state != "FAILED" or stage_name != "CloudFormationResource":
        print("State is not FAILED or stage is not CloudFormationResource. Nothing to do.")
        logger.debug("Either state is not FAILED or stage is not CloudFormationResource, returning early.")
        return

    # Step 4) Validate mandatory fields
    if not pipeline_name or not execution_id:
        print("Missing pipeline_name or execution-id in the event detail. Exiting.")
        logger.debug("Missing pipeline_name or execution_id, cannot proceed.")
        return

    # Step 5) Retrieve all action executions for this pipeline execution
    action_executions = retrieve_action_executions(pipeline_name, execution_id)
    if action_executions is None:
        return  # Already logged an error

    # Step 6) Log details about each action
    log_action_details(action_executions)

    # Step 7) Identify failed CodeBuild actions
    failed_codebuild_actions = identify_failed_codebuild_actions(action_executions)
    if not failed_codebuild_actions:
        # No more work
        return

    # Step 8) Check logs for 'Rate exceeded' & potentially retry
    process_failed_codebuild_actions(failed_codebuild_actions, pipeline_name, execution_id, stage_name)
